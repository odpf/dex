// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/odpf/dex/generated/models"
)

// ApplyActionReader is a Reader for the ApplyAction structure.
type ApplyActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ApplyActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewApplyActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewApplyActionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewApplyActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewApplyActionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewApplyActionOK creates a ApplyActionOK with default headers values
func NewApplyActionOK() *ApplyActionOK {
	return &ApplyActionOK{}
}

/*
ApplyActionOK describes a response with status code 200, with default header values.

Found firehose with given URN
*/
type ApplyActionOK struct {
	Payload *models.Firehose
}

// IsSuccess returns true when this apply action o k response has a 2xx status code
func (o *ApplyActionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this apply action o k response has a 3xx status code
func (o *ApplyActionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply action o k response has a 4xx status code
func (o *ApplyActionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this apply action o k response has a 5xx status code
func (o *ApplyActionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this apply action o k response a status code equal to that given
func (o *ApplyActionOK) IsCode(code int) bool {
	return code == 200
}

func (o *ApplyActionOK) Error() string {
	return fmt.Sprintf("[POST /projects/{projectId}/firehoses/{firehoseUrn}/reset][%d] applyActionOK  %+v", 200, o.Payload)
}

func (o *ApplyActionOK) String() string {
	return fmt.Sprintf("[POST /projects/{projectId}/firehoses/{firehoseUrn}/reset][%d] applyActionOK  %+v", 200, o.Payload)
}

func (o *ApplyActionOK) GetPayload() *models.Firehose {
	return o.Payload
}

func (o *ApplyActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Firehose)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyActionBadRequest creates a ApplyActionBadRequest with default headers values
func NewApplyActionBadRequest() *ApplyActionBadRequest {
	return &ApplyActionBadRequest{}
}

/*
ApplyActionBadRequest describes a response with status code 400, with default header values.

Update request is not valid.
*/
type ApplyActionBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this apply action bad request response has a 2xx status code
func (o *ApplyActionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply action bad request response has a 3xx status code
func (o *ApplyActionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply action bad request response has a 4xx status code
func (o *ApplyActionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this apply action bad request response has a 5xx status code
func (o *ApplyActionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this apply action bad request response a status code equal to that given
func (o *ApplyActionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ApplyActionBadRequest) Error() string {
	return fmt.Sprintf("[POST /projects/{projectId}/firehoses/{firehoseUrn}/reset][%d] applyActionBadRequest  %+v", 400, o.Payload)
}

func (o *ApplyActionBadRequest) String() string {
	return fmt.Sprintf("[POST /projects/{projectId}/firehoses/{firehoseUrn}/reset][%d] applyActionBadRequest  %+v", 400, o.Payload)
}

func (o *ApplyActionBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ApplyActionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyActionNotFound creates a ApplyActionNotFound with default headers values
func NewApplyActionNotFound() *ApplyActionNotFound {
	return &ApplyActionNotFound{}
}

/*
ApplyActionNotFound describes a response with status code 404, with default header values.

Firehose with given URN was not found
*/
type ApplyActionNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this apply action not found response has a 2xx status code
func (o *ApplyActionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply action not found response has a 3xx status code
func (o *ApplyActionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply action not found response has a 4xx status code
func (o *ApplyActionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this apply action not found response has a 5xx status code
func (o *ApplyActionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this apply action not found response a status code equal to that given
func (o *ApplyActionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ApplyActionNotFound) Error() string {
	return fmt.Sprintf("[POST /projects/{projectId}/firehoses/{firehoseUrn}/reset][%d] applyActionNotFound  %+v", 404, o.Payload)
}

func (o *ApplyActionNotFound) String() string {
	return fmt.Sprintf("[POST /projects/{projectId}/firehoses/{firehoseUrn}/reset][%d] applyActionNotFound  %+v", 404, o.Payload)
}

func (o *ApplyActionNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ApplyActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyActionInternalServerError creates a ApplyActionInternalServerError with default headers values
func NewApplyActionInternalServerError() *ApplyActionInternalServerError {
	return &ApplyActionInternalServerError{}
}

/*
ApplyActionInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type ApplyActionInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this apply action internal server error response has a 2xx status code
func (o *ApplyActionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply action internal server error response has a 3xx status code
func (o *ApplyActionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply action internal server error response has a 4xx status code
func (o *ApplyActionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this apply action internal server error response has a 5xx status code
func (o *ApplyActionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this apply action internal server error response a status code equal to that given
func (o *ApplyActionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ApplyActionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /projects/{projectId}/firehoses/{firehoseUrn}/reset][%d] applyActionInternalServerError  %+v", 500, o.Payload)
}

func (o *ApplyActionInternalServerError) String() string {
	return fmt.Sprintf("[POST /projects/{projectId}/firehoses/{firehoseUrn}/reset][%d] applyActionInternalServerError  %+v", 500, o.Payload)
}

func (o *ApplyActionInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ApplyActionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ApplyActionBody apply action body
swagger:model ApplyActionBody
*/
type ApplyActionBody struct {

	// datetime
	// Example: 2022-10-10T10:10:10.100Z
	// Format: date-time
	Datetime strfmt.DateTime `json:"datetime,omitempty"`

	// to
	// Required: true
	// Enum: [DATETIME EARLIEST LATEST]
	To *string `json:"to"`
}

// Validate validates this apply action body
func (o *ApplyActionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ApplyActionBody) validateDatetime(formats strfmt.Registry) error {
	if swag.IsZero(o.Datetime) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"datetime", "body", "date-time", o.Datetime.String(), formats); err != nil {
		return err
	}

	return nil
}

var applyActionBodyTypeToPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DATETIME","EARLIEST","LATEST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applyActionBodyTypeToPropEnum = append(applyActionBodyTypeToPropEnum, v)
	}
}

const (

	// ApplyActionBodyToDATETIME captures enum value "DATETIME"
	ApplyActionBodyToDATETIME string = "DATETIME"

	// ApplyActionBodyToEARLIEST captures enum value "EARLIEST"
	ApplyActionBodyToEARLIEST string = "EARLIEST"

	// ApplyActionBodyToLATEST captures enum value "LATEST"
	ApplyActionBodyToLATEST string = "LATEST"
)

// prop value enum
func (o *ApplyActionBody) validateToEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applyActionBodyTypeToPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ApplyActionBody) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"to", "body", o.To); err != nil {
		return err
	}

	// value enum
	if err := o.validateToEnum("body"+"."+"to", "body", *o.To); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this apply action body based on context it is used
func (o *ApplyActionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ApplyActionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ApplyActionBody) UnmarshalBinary(b []byte) error {
	var res ApplyActionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
