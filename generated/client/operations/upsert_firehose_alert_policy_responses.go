// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/odpf/dex/generated/models"
)

// UpsertFirehoseAlertPolicyReader is a Reader for the UpsertFirehoseAlertPolicy structure.
type UpsertFirehoseAlertPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpsertFirehoseAlertPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpsertFirehoseAlertPolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewUpsertFirehoseAlertPolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpsertFirehoseAlertPolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpsertFirehoseAlertPolicyOK creates a UpsertFirehoseAlertPolicyOK with default headers values
func NewUpsertFirehoseAlertPolicyOK() *UpsertFirehoseAlertPolicyOK {
	return &UpsertFirehoseAlertPolicyOK{}
}

/*
UpsertFirehoseAlertPolicyOK describes a response with status code 200, with default header values.

Updated alert policy for firehose.
*/
type UpsertFirehoseAlertPolicyOK struct {
	Payload *models.AlertPolicy
}

// IsSuccess returns true when this upsert firehose alert policy o k response has a 2xx status code
func (o *UpsertFirehoseAlertPolicyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upsert firehose alert policy o k response has a 3xx status code
func (o *UpsertFirehoseAlertPolicyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert firehose alert policy o k response has a 4xx status code
func (o *UpsertFirehoseAlertPolicyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upsert firehose alert policy o k response has a 5xx status code
func (o *UpsertFirehoseAlertPolicyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert firehose alert policy o k response a status code equal to that given
func (o *UpsertFirehoseAlertPolicyOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpsertFirehoseAlertPolicyOK) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/firehoses/{firehoseUrn}/alertPolicy][%d] upsertFirehoseAlertPolicyOK  %+v", 200, o.Payload)
}

func (o *UpsertFirehoseAlertPolicyOK) String() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/firehoses/{firehoseUrn}/alertPolicy][%d] upsertFirehoseAlertPolicyOK  %+v", 200, o.Payload)
}

func (o *UpsertFirehoseAlertPolicyOK) GetPayload() *models.AlertPolicy {
	return o.Payload
}

func (o *UpsertFirehoseAlertPolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AlertPolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertFirehoseAlertPolicyNotFound creates a UpsertFirehoseAlertPolicyNotFound with default headers values
func NewUpsertFirehoseAlertPolicyNotFound() *UpsertFirehoseAlertPolicyNotFound {
	return &UpsertFirehoseAlertPolicyNotFound{}
}

/*
UpsertFirehoseAlertPolicyNotFound describes a response with status code 404, with default header values.

Firehose with given URN was not found
*/
type UpsertFirehoseAlertPolicyNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this upsert firehose alert policy not found response has a 2xx status code
func (o *UpsertFirehoseAlertPolicyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert firehose alert policy not found response has a 3xx status code
func (o *UpsertFirehoseAlertPolicyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert firehose alert policy not found response has a 4xx status code
func (o *UpsertFirehoseAlertPolicyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert firehose alert policy not found response has a 5xx status code
func (o *UpsertFirehoseAlertPolicyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert firehose alert policy not found response a status code equal to that given
func (o *UpsertFirehoseAlertPolicyNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpsertFirehoseAlertPolicyNotFound) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/firehoses/{firehoseUrn}/alertPolicy][%d] upsertFirehoseAlertPolicyNotFound  %+v", 404, o.Payload)
}

func (o *UpsertFirehoseAlertPolicyNotFound) String() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/firehoses/{firehoseUrn}/alertPolicy][%d] upsertFirehoseAlertPolicyNotFound  %+v", 404, o.Payload)
}

func (o *UpsertFirehoseAlertPolicyNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpsertFirehoseAlertPolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertFirehoseAlertPolicyInternalServerError creates a UpsertFirehoseAlertPolicyInternalServerError with default headers values
func NewUpsertFirehoseAlertPolicyInternalServerError() *UpsertFirehoseAlertPolicyInternalServerError {
	return &UpsertFirehoseAlertPolicyInternalServerError{}
}

/*
UpsertFirehoseAlertPolicyInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type UpsertFirehoseAlertPolicyInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this upsert firehose alert policy internal server error response has a 2xx status code
func (o *UpsertFirehoseAlertPolicyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert firehose alert policy internal server error response has a 3xx status code
func (o *UpsertFirehoseAlertPolicyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert firehose alert policy internal server error response has a 4xx status code
func (o *UpsertFirehoseAlertPolicyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this upsert firehose alert policy internal server error response has a 5xx status code
func (o *UpsertFirehoseAlertPolicyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this upsert firehose alert policy internal server error response a status code equal to that given
func (o *UpsertFirehoseAlertPolicyInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpsertFirehoseAlertPolicyInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/firehoses/{firehoseUrn}/alertPolicy][%d] upsertFirehoseAlertPolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *UpsertFirehoseAlertPolicyInternalServerError) String() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/firehoses/{firehoseUrn}/alertPolicy][%d] upsertFirehoseAlertPolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *UpsertFirehoseAlertPolicyInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpsertFirehoseAlertPolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
