// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Alert alert
//
// swagger:model Alert
type Alert struct {

	// id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// metric
	Metric string `json:"metric,omitempty"`

	// resource
	Resource string `json:"resource,omitempty"`

	// rule
	Rule string `json:"rule,omitempty"`

	// severity
	Severity string `json:"severity,omitempty"`

	// triggered at
	// Example: 2022-06-23T16:49:15.885541Z
	// Read Only: true
	// Format: date-time
	TriggeredAt strfmt.DateTime `json:"triggered_at,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this alert
func (m *Alert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTriggeredAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Alert) validateTriggeredAt(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggeredAt) { // not required
		return nil
	}

	if err := validate.FormatOf("triggered_at", "body", "date-time", m.TriggeredAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this alert based on the context it is used
func (m *Alert) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggeredAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Alert) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Alert) contextValidateTriggeredAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "triggered_at", "body", strfmt.DateTime(m.TriggeredAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Alert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Alert) UnmarshalBinary(b []byte) error {
	var res Alert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
